package com.redhering.nunuaraha;

import java.text.DecimalFormat;
import java.util.ArrayList;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Typeface;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
 
public class AdapterMyPastReceipt extends BaseAdapter {
	private static ArrayList<RequestedResultsReceipt> myReceipt;
    private LayoutInflater mInflater;
    private Context context;
    private int resource;
    
    public static final String MY_SESSION = "mySession";
    SharedPreferences sharedPreferences;
    SharedPreferences.Editor editor;
    Gson gson;
    Typeface EkMukta_Light;
 
    public AdapterMyPastReceipt(Context ctx, ArrayList<RequestedResultsReceipt> results) {
    	myReceipt = results;
        mInflater = LayoutInflater.from(ctx);
        context=ctx;
  		EkMukta_Light = Typeface.createFromAsset(context.getAssets(),"fonts/ek_mukta/EkMukta-Light.ttf");
  		sharedPreferences = context.getSharedPreferences(MY_SESSION,Context.MODE_PRIVATE);
  		editor = sharedPreferences.edit();
        gson = new Gson();
    }
 
    public int getCount() {
        return myReceipt.size();
    }
 
    public Object getItem(int position) {
        return myReceipt.get(position);
    }
 
    public long getItemId(int position) {
        return position;
    }
 
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;
        if (convertView == null) {
            convertView = mInflater.inflate(R.layout.receiptpast, null);
            holder = new ViewHolder();
            holder.description = (TextView) convertView.findViewById(R.id.description);
            holder.qty = (TextView) convertView.findViewById(R.id.qty);
            holder.price = (TextView) convertView.findViewById(R.id.price);
            holder.addtocart = (Button) convertView.findViewById(R.id.addtocart);
           // holder.removefromcart = (Button) convertView.findViewById(R.id.removefromcart);
            holder.thumbnail = (ImageView) convertView.findViewById(R.id.thumbnail);
            
 
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
 
        
        Integer itemId = Integer.parseInt(myReceipt.get(position).getId());
        if(itemId.equals(100002)){
        	holder.description.setText(myReceipt.get(position).getTitle());
        	holder.description.setTypeface(Typeface.DEFAULT_BOLD);
        	
        	holder.qty.setText(myReceipt.get(position).getUnits().toString());
        	holder.qty.setTypeface(Typeface.DEFAULT_BOLD);
        	
        	holder.price.setText(myReceipt.get(position).getPrice());
        	holder.price.setTypeface(Typeface.DEFAULT_BOLD);
        	
        	
        }else if(itemId > 100000){
        	holder.description.setText(myReceipt.get(position).getTitle());
        	holder.description.setTypeface(Typeface.DEFAULT_BOLD);
        	
        	holder.qty.setText("");
        	holder.qty.setTypeface(Typeface.DEFAULT_BOLD);
        	
        	holder.price.setText("");
        	holder.price.setTypeface(Typeface.DEFAULT_BOLD);
        	
        }
        else{
        	holder.description.setText(myReceipt.get(position).getTitle() + System.getProperty("line.separator") +myReceipt.get(position).getSize()+" ");
        	holder.description.setTypeface(EkMukta_Light, Typeface.NORMAL);
            
            String price = myReceipt.get(position).getPrice();
            if(android.text.TextUtils.isEmpty(price) == false && android.text.TextUtils.isDigitsOnly(price)){
    			DecimalFormat precision = new DecimalFormat("0.00");
    			Double item_price_double = Double.parseDouble(myReceipt.get(position).getPrice()); 
    			String item_price = precision.format(item_price_double);
    	        holder.price.setText(item_price);
            }else{
            	holder.price.setVisibility(View.GONE);
            }
        	holder.price.setTypeface(EkMukta_Light, Typeface.NORMAL);
            
            //holder.qty.setText(myReceipt.get(position).getUnits()+" X ");
        	holder.qty.setText(myReceipt.get(position).getUnits()+" X ");
        	holder.qty.setTypeface(EkMukta_Light, Typeface.NORMAL);
            
        }
        
        holder.addtocart.setTag("add");
        holder.addtocart.setOnClickListener(this);
        return convertView;
    }
    

	static class ViewHolder {
        ImageView thumbnail;
		//Button removefromcart;
		Button addtocart;
		TextView description;
        TextView qty;
        TextView price;
    }
 
   
	 public void onClick(View v) {
	    	View parentRow = (View) v.getParent();
			ListView listView = (ListView) parentRow.getParent();
			final int position = listView.getPositionForView(parentRow);
			RequestedResults  item = (RequestedResults) listView.getItemAtPosition(position);
	    	String action = v.getTag().toString();
	    	
	    	if(action.equals("add")){
				//ADD UNITS
	    		Button addtocart =(Button) parentRow.findViewById(R.id.addtocart);
	    		
	    		String jsonMyCartString = sharedPreferences.getString("myTrolley", (new JSONObject()).toString());
	        	try {
	        		Integer units = 1;
					JSONObject jsonMyCartObject = new JSONObject(jsonMyCartString);
					if(jsonMyCartObject.has(item.item_id)){
						units = Integer.parseInt(jsonMyCartObject.getString(item.item_id));
						units++;
						addtocart.setText("+"+units);
						
						
					}
					jsonMyCartObject.put(item.item_id,units);
					String newJsonMyCartString = jsonMyCartObject.toString();
		            editor.putString("myTrolley", newJsonMyCartString);
		            editor.commit();
					
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        	COUNT_CART_ITEMS ++;
	            cartButtonNotification.setText(COUNT_CART_ITEMS.toString());
	            
	            String currentTotal =  subtitle.getText().toString().replaceAll("[^0-9]", "");
	            //Log.i("currentTotal"," --> "+currentTotal);
	            
	            DecimalFormat twoDecimal = new DecimalFormat("0.00");
	            Double currentTotalDouble = Double.parseDouble(currentTotal);
	            currentTotalDouble/=100;
	            Double itemPriceDouble = Double.parseDouble(item.item_price);
	            Double newTotal = currentTotalDouble + itemPriceDouble;
	            String newTotalString = twoDecimal.format(newTotal);
	        	subtitle.setText("My Cart (KES."+newTotalString+")");
	        
	            
			}else{
				//REMOVE UNITS
				try{
		    		showDialogRemoveFromCart(item, position, "Remove Item?", v);
		        }
		        catch (Exception e) {
		            e.printStackTrace();
		        }
			}
			
	    	
	        
	    }
	    
	    public void showDialogRemoveFromCart(final RequestedResults item, final int position, final String message, final View v) throws Exception{
	        AlertDialog.Builder builder = new AlertDialog.Builder(context);
	    	final String jsonMyCartString = sharedPreferences.getString("myTrolley", (new JSONObject()).toString());
	    	try {
	    		Integer units = 1;
				JSONObject jsonMyCartObject = new JSONObject(jsonMyCartString);
				if(jsonMyCartObject.has(item.item_id)){
					units = Integer.parseInt(jsonMyCartObject.getString(item.item_id));
					units--;
					if(units.equals(0)){
				        builder.setMessage(item.item_title+" will be removed from your Cart completely. " + message); 
					}else{
				        builder.setMessage("1 "+item.item_title+" will be removed from your Cart." + message); 
					}
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
	        

	        builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
	            @Override
	            public void onClick(DialogInterface dialog, int which) {
	        		
	            	//UPDATE CART
	            	View parentRow = (View) v.getParent();
	            	Button addtocart =(Button) parentRow.findViewById(R.id.addtocart);
	            	try {
	            		Integer units = 1;
	    				JSONObject jsonMyCartObject = new JSONObject(jsonMyCartString);
	    				if(jsonMyCartObject.has(item.item_id)){
	    					units = Integer.parseInt(jsonMyCartObject.getString(item.item_id));
							units--;
							if(units<=0){
	    	    				jsonMyCartObject.remove(item.item_id);
	    						Toast.makeText(context, item.item_title+" removed." , Toast.LENGTH_SHORT).show();
	    		            	Intent intent = new Intent(context,ActivityStep08ListCart.class);
	    		                context.startActivity(intent);
	    					}else{
	    	    				jsonMyCartObject.put(item.item_id,units);
	    						Toast.makeText(context, "1 "+item.item_title+" removed" , Toast.LENGTH_SHORT).show();
	    						addtocart.setText("+"+units.toString());
	    						
	    						String currentTotal =  subtitle.getText().toString().replaceAll("[^0-9]", "");
	    			            //Log.i("currentTotal"," --> "+currentTotal);
	    			            
	    			            DecimalFormat twoDecimal = new DecimalFormat("0.00");
	    			            Double currentTotalDouble = Double.parseDouble(currentTotal);
	    			            currentTotalDouble/=100;
	    			            Double itemPriceDouble = Double.parseDouble(item.item_price);
	    			            Double newTotal = currentTotalDouble - itemPriceDouble;
	    			            String newTotalString = twoDecimal.format(newTotal);
	    			        	subtitle.setText("My Cart (KES."+newTotalString+")");
	    			        	
	    			        	
	    					}
	    				}
	    				
	    				String newJsonMyCartString = jsonMyCartObject.toString();
	    	            editor.putString("myTrolley", newJsonMyCartString);
	    	            editor.commit();
	    				
	    			} catch (JSONException e) {
	    				// TODO Auto-generated catch block
	    				e.printStackTrace();
	    			}
	            	COUNT_CART_ITEMS --;
	                cartButtonNotification.setText(COUNT_CART_ITEMS.toString());
	                dialog.dismiss();

	                Log.i("Removed from cart", " --> " + item.item_title);
	            	Log.i("my cart hash map"," --> "+jsonMyCartString);
	            }
	        });

	        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {   
	            @Override
	            public void onClick(DialogInterface dialog, int which) {
	                dialog.dismiss();
	            }
	        });

	        builder.show();
	    }
	 
		private Context getContext() {
			// TODO Auto-generated method stub
			return null;
		}

	}
