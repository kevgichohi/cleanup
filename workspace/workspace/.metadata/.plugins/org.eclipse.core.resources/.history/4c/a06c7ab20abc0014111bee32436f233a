package com.example.mobiletrolley;

import android.net.Uri;
import android.os.AsyncTask;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Toast;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutionException;

import com.example.mobiletrolley.R;
import com.google.gson.Gson;
 
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.widget.TextView;
 
public class ShelvesAdapter extends BaseAdapter implements android.view.View.OnClickListener {
	private static ArrayList<RequestedResults> searchArrayList;
    private LayoutInflater mInflater;
    private Context context;
    private int resource;
    
    public static final String MY_CART = "MyCart";
    
    public ShelvesAdapter(Context ctx, ArrayList<RequestedResults> results) {
        searchArrayList = results;
        mInflater = LayoutInflater.from(ctx);
        context=ctx;
        
    }

	

	public int getCount() {
        return searchArrayList.size();
    }
 
    public Object getItem(int position) {
        return searchArrayList.get(position);
    }
 
    public long getItemId(int position) {
        return position;
    }
 
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;
        if (convertView == null) {
            convertView = mInflater.inflate(R.layout.products, null);
            holder = new ViewHolder();
            holder.title = (TextView) convertView.findViewById(R.id.title);
            holder.size = (TextView) convertView.findViewById(R.id.size);
            holder.price = (TextView) convertView.findViewById(R.id.price);
            holder.thumbnail = (ImageView) convertView.findViewById(R.id.thumbnail);
            holder.addtocart = (Button) convertView.findViewById(R.id.addtocart);
            
 
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
 
        holder.title.setText(searchArrayList.get(position).getTitle());
        holder.size.setText(searchArrayList.get(position).getSize());
        holder.price.setText(searchArrayList.get(position).getPrice());
        
        Bitmap image = null;
		try {
			image = new DownloadImageTask(holder.thumbnail).execute(searchArrayList.get(position).getThumbnailUrl()).get();
		} catch (InterruptedException | ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
        holder.thumbnail.setImageBitmap(image);
        

        holder.addtocart.setTag(searchArrayList.get(position).getId());
        holder.addtocart.setOnClickListener(this);

        
        return convertView;
    }
    

	static class ViewHolder {
        TextView title;
        TextView size;
        TextView price;
        ImageView thumbnail;
        Button addtocart;
    }
    
    private class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
        ImageView bmImage;

        public DownloadImageTask(ImageView bmImage) {
            this.bmImage = bmImage;
        }

        protected Bitmap doInBackground(String... urls) {
            String urldisplay = urls[0];
            Bitmap mIcon11 = null;
            try {
                InputStream in = new java.net.URL(urldisplay).openStream();
                mIcon11 = BitmapFactory.decodeStream(in);
            } catch (Exception e) {
                Log.e("Error", e.getMessage());
                e.printStackTrace();
            }
            return mIcon11;
        }

        protected void onPostExecute(Bitmap result) {
            //bmImage.setImageBitmap(result);
        }
    }
 
    @Override
    public void onClick(View v) {
    	View parentRow = (View) v.getParent();
		ListView listView = (ListView) parentRow.getParent();
		final int position = listView.getPositionForView(parentRow);
		RequestedResults  item = (RequestedResults) listView.getItemAtPosition(position);
		
		//initialize shared prefrences
        SharedPreferences mytrolley;
        
        //initialize the outer array that will be populated with both the newly added item plus the items previously added to cart
        ArrayList<ArrayList<String>> inMyTrolley = new ArrayList<ArrayList<String>>();  //Rows with columns
        
        //initialize the inner array for the items that were already added to cart
        List getMyCart = null;
        
        //get the items that were already in cart
        mytrolley = context.getSharedPreferences(MY_CART,Context.MODE_PRIVATE);
        if(mytrolley.contains("myTrolley")) {
            String jsongetMyCart = mytrolley.getString("myTrolley", null);
            Gson gson = new Gson();
            List[] catItems = gson.fromJson(jsongetMyCart,List[].class);
            getMyCart = Arrays.asList(catItems);
            
            //add the array for the items that were already in the cart into the outer array
            inMyTrolley.add(new ArrayList<String>(getMyCart)); 
            
            Log.i("selected item ", "in cart -->" + catItems);
        }
        
        //initialize the inner array for the new item added to cart
		ArrayList<String> trolleyItem = new ArrayList<String>(); 
		
		//Populate the inner array for the new item added to cart
		trolleyItem.add(item.item_id); 
		trolleyItem.add(item.item_title); 
		trolleyItem.add(item.item_price);  
		trolleyItem.add(item.item_size);
		trolleyItem.add(item.item_thumbnail_url);
		
		//add the inner array for the new item added to cart into the outer array
		inMyTrolley.add(new ArrayList<String>(trolleyItem)); 
		
		Log.i("selected item ", "added to cart -->" + trolleyItem);
		
		trolleyItem.clear();     
		
		// Update the shared preferences with the aouter array containing all the items added to cart
	    SharedPreferences.Editor editor = mytrolley.edit();
	    Gson gson = new Gson();
        String myCart = gson.toJson(inMyTrolley);
        editor.putString("myTrolley", myCart);
        
        // Commit the edits!
        editor.commit();
        
        //display flash message
        Toast.makeText(context, "Added to cart" , Toast.LENGTH_SHORT).show();
    }


	private Context getContext() {
		// TODO Auto-generated method stub
		return null;
	}

}
