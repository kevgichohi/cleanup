package com.redhering.nunuaraha;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ExecutionException;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.redhering.nunuaraha.R;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Typeface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

public class ActivityStep11MyReceipt extends Activity {
	SQLiteDatabase nunuaRahaDatabase;
	public static final String MY_SESSION = "mySession";
    SharedPreferences sharedPreferences;
    SharedPreferences.Editor editor;
    Gson gson;

    ArrayList<RequestedResultsReceipt> MYRECEIPT;
	AdapterMyReceipt myadapterreceipt;
	LinearLayout layout_progressbar;
	RelativeLayout headersection;
	RelativeLayout footersection;
	RelativeLayout subtitlesection;
	ListView listView;
    public Integer TOTAL = 0;
	public static String SELECTED_BRANCH_ID;
	public static String SELECTED_BRANCH_TITLE;
	public static String SELECTED_BRAND_ID;
	public static String SELECTED_BRAND_TITLE;
	public static String SELECTED_BRAND_LOGO;
	public static String SELECTED_LOCATION;
	public static String SELECTED_LOCATION_ID;
	public static String SELECTED_DELIVERY_CHARGES;
	public static String CUSTOMER_FIRST_NAME;
	public static String CUSTOMER_LAST_NAME;
	public static String CUSTOMER_PHONE_NUMBER;
	public static String CUSTOMER_EMAIL_ADDRESS;
	public static String CUSTOMER_ADDRESS;
	Boolean error;
	Typeface EkMukta_Light;
	TextView app_name;
	TextView headerText;
	Button menuIcon;
	Button shoppingButton;
	Button cartButton;
	Button pay;
	TextView shopDetails;
	TextView userName;
	TextView emailAddress;
	TextView phoneNumber;
	TextView delivery;
	Button checkout;
	Button clearcart;
	TextView errorMessage;
	Button backToAisles;
	ImageView shopLogoview;
    String extStorageDirectory;
    Bitmap bm;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_receipt);
		overridePendingTransition(R.anim.slide_page_in,R.anim.slide_page_out);//SlideIn animation
		initViews();
		
		listView = (ListView) findViewById(R.id.receiptView);
		layout_progressbar = (LinearLayout) findViewById(R.id.progressbar_view);
	    headersection = (RelativeLayout) findViewById(R.id.header);
	    footersection = (RelativeLayout) findViewById(R.id.footer);
	    subtitlesection = (RelativeLayout) findViewById(R.id.subHeader);
	    sharedPreferences = getSharedPreferences(MY_SESSION,Context.MODE_PRIVATE);
	    editor = sharedPreferences.edit();
	    gson = new Gson();
		EkMukta_Light = Typeface.createFromAsset(getAssets(),"fonts/ek_mukta/EkMukta-Light.ttf");
  		app_name = (TextView) findViewById(R.id.app_name);
		headerText = (TextView) findViewById(R.id.headerText);
		menuIcon  = (Button) findViewById(R.id.menu_icon);
		pay  = (Button) findViewById(R.id.pay);
  		backToAisles = (Button) findViewById(R.id.backToAisles);
		errorMessage = (TextView) findViewById(R.id.errors);
		shopDetails = (TextView) findViewById(R.id.shopDetails);
		userName = (TextView) findViewById(R.id.userName);
		emailAddress = (TextView) findViewById(R.id.email);
		phoneNumber = (TextView) findViewById(R.id.phone);
		delivery = (TextView) findViewById(R.id.delivery);
  		shoppingButton = (Button) findViewById(R.id.shoppingButton);
  		cartButton = (Button) findViewById(R.id.cartButton);
    	shopLogoview = (ImageView) findViewById(R.id.shopLogo);
  		
  		//SET TEXT, APPLY FONTS, SETONCLICKLISTENERS
  		new ApplyViewParamsTask().execute();
  		
  		//LIST VIEW
        new populateListViewTask().execute(); 
        MYRECEIPT = new ArrayList<RequestedResultsReceipt>();
  		myadapterreceipt = new AdapterMyReceipt(ActivityStep11MyReceipt.this, MYRECEIPT);
		setListViewHeightBasedOnChildren(listView);
		listView.setAdapter(myadapterreceipt);
	}
	
	@Override
	public void onBackPressed() {
		finish();
		overridePendingTransition(R.anim.slide_page_in,R.anim.slide_page_out);//SlideIn animation
	}
	
	@Override
	public void finish() {
	    super.finish();
		overridePendingTransition(R.anim.slide_page_in,R.anim.slide_page_out);//SlideIn animation
	}
	
	@Override
	public void onResume() {
		super.onResume();  // Always call the superclass method first
		overridePendingTransition(R.anim.slide_page_in,R.anim.slide_page_out);//SlideIn animation
		
	}

	private class populateListViewTask extends AsyncTask<String, Void, String> {
		
		@Override
	    protected void onPreExecute() {
	        super.onPreExecute();
	    	layout_progressbar.setVisibility(View.VISIBLE);
	    }
		
		protected String doInBackground(String...params) {
			// TODO Auto-generated method stub
			return "Done";
		}
		
	    protected void onPostExecute(String params) {
	    	layout_progressbar.setVisibility(View.GONE);
            listView.setVisibility(View.VISIBLE);
      		listView.setDividerHeight(0);
      		myadapterreceipt.notifyDataSetChanged();
            
            JSONObject jsonMyCartObject = null;
            String stockString = "";
            if(sharedPreferences.contains("myTrolley")) {
            	String jsonMyCartString = sharedPreferences.getString("myTrolley", null);
				try {
					jsonMyCartObject = new JSONObject(jsonMyCartString);
					Iterator<String> loop = jsonMyCartObject.keys();
				    while (loop.hasNext()) {
				        String key = loop.next();
				        stockString = stockString + key+",";
				    }
				} catch (JSONException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
            }
            String[] stockArr = stockString.split(",");
	    	String inClause = gson.toJson(stockArr); //at this point inClause will look like ["23","343","33","55","43"]
	    	inClause = inClause.replace("[","(");//at this point inClause will look like ("23","343","33","55","43"]
	    	inClause = inClause.replace("]",")");//at this point inClause will look like ("23","343","33","55","43")
	    	inClause = inClause.replace("\"","");//now at this point inClause will look like  (23,343,33,55,43) so use it to construct your SELECT
	    	Log.i("in clause"," -->" +inClause);
            
	    	nunuaRahaDatabase = openOrCreateDatabase("nunuaRahaDatabase",MODE_PRIVATE,null);
	    	Cursor resultsProductsCursor = nunuaRahaDatabase.rawQuery("SELECT * FROM hdjgf_shops_stocks_brands WHERE id IN " + inClause,null);
	    	resultsProductsCursor.moveToFirst();
        	String[] list_item_ids = new String[resultsProductsCursor.getCount()];
			String[] list_item_titles = new String[resultsProductsCursor.getCount()];
			Integer totalItems = 0;
			int k = 0;
	    	while (resultsProductsCursor.isAfterLast() == false) {
				String item_id = resultsProductsCursor.getString(0);
				String item_title = resultsProductsCursor.getString(1);
            	String item_size = resultsProductsCursor.getString(2);
            	String item_price = resultsProductsCursor.getString(3);
            	String item_thumbnail_url = resultsProductsCursor.getString(4);
            	Integer item_units_in_cart = 0;
				try {
					item_units_in_cart = Integer.parseInt(jsonMyCartObject.getString(item_id));
					totalItems = totalItems + item_units_in_cart;
				} catch (NumberFormatException | JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            	TOTAL = TOTAL + Integer.parseInt(item_price) * item_units_in_cart;
				
				list_item_ids[k] = item_id;
				list_item_titles[k] = item_title;
				
				RequestedResultsReceipt d = new RequestedResultsReceipt();
				
				d.setId(item_id);
				d.setTitle(item_title);
				d.setPrice(item_price);
				d.setSize(item_size);
				d.setUnits(item_units_in_cart);
				
			    d.item_id = item_id;
			    d.item_title = item_title;
			    d.item_price = item_price;
			    d.item_size = item_size;
			    d.item_units_in_cart = item_units_in_cart;
			    
			    MYRECEIPT.add(d);
				
	    	    k++;
	    	    resultsProductsCursor.moveToNext();
	    	}
	    	
	    	//TOTAL
            DecimalFormat precision = new DecimalFormat("0.00");
			Double total_double = Double.parseDouble(TOTAL.toString()); 
			String total_price = precision.format(total_double);
			editor.putString("myTrolleyTotal", total_price);
            editor.commit();
			
			//VAT AMT
			Integer vat = TOTAL * 16;
			Double vatdouble = Double.parseDouble(vat.toString());
			vatdouble/=100;
			
			//VATABLE AMT
			Double vatableAmt = total_double - vatdouble;
			String vatableAmtStr = vatableAmt.toString();
			
			RequestedResultsReceipt d = new RequestedResultsReceipt();
			d.setId("100001");
			d.setTitle("TOTAL");
			d.setPrice(total_price);
			d.setSize("");
			d.setUnits(0);
		    d.item_id = "100001";
		    d.item_title = "TOTAL";
		    d.item_price = total_price;
		    d.item_size = "";
		    d.item_units_in_cart = 0;
			MYRECEIPT.add(d);
			
			//TOTAL ITEMS
			RequestedResultsReceipt e = new RequestedResultsReceipt();
			e.setId("100002");
			e.setTitle("TOTAL ITEMS");
			e.setPrice("");
			e.setSize("");
			e.setUnits(totalItems);
		    e.item_id = "100002";
		    e.item_title = "TOTAL ITEMS";
		    e.item_price = "";
		    e.item_size = "";
		    e.item_units_in_cart = totalItems;
			MYRECEIPT.add(e);
			
			//VAT RATE
			RequestedResultsReceipt f = new RequestedResultsReceipt();
			f.setId("100003");
			f.setTitle("VAT RATE");
			f.setPrice(total_price);
			f.setSize("16%");
			f.setUnits(0);
		    f.item_id = "100003";
		    f.item_title = "VAT RATE";
		    f.item_price = "16%";
		    f.item_size = "";
		    f.item_units_in_cart = 0;
			MYRECEIPT.add(f);
			
			//VATABLE AMOUNT
			RequestedResultsReceipt g = new RequestedResultsReceipt();
			g.setId("100004");
			g.setTitle("VATABLE AMT");
			g.setPrice(vatableAmtStr);
			g.setSize("");
			g.setUnits(0);
		    g.item_id = "100004";
		    g.item_title = "VATABLE AMT";
		    g.item_price = vatableAmtStr;
		    g.item_size = "";
		    g.item_units_in_cart = 0;
			MYRECEIPT.add(g);
			
			//VAT AMOUNT
			RequestedResultsReceipt h = new RequestedResultsReceipt();
			h.setId("100005");
			h.setTitle("VAT AMT");
			h.setPrice(vatdouble.toString());
			h.setSize("");
			h.setUnits(0);
		    h.item_id = "100005";
		    h.item_title = "VAT AMT";
		    h.item_price = vatdouble.toString();
		    h.item_size = "";
		    h.item_units_in_cart = 0;
			MYRECEIPT.add(h);
	    }
	    
	 }
	
	public static void setListViewHeightBasedOnChildren(ListView listView) {
	    ListAdapter listAdapter = listView.getAdapter();
	    if (listAdapter == null)
	        return;

	    int desiredWidth = MeasureSpec.makeMeasureSpec(listView.getWidth(), MeasureSpec.UNSPECIFIED);
	    int totalHeight = -10;
	    View view = null;
	    for (int i = 0; i < listAdapter.getCount(); i++) {
	        view = listAdapter.getView(i, view, listView);
	        if (i == 0)
	            view.setLayoutParams(new ViewGroup.LayoutParams(desiredWidth, LayoutParams.WRAP_CONTENT));

	        view.measure(desiredWidth, MeasureSpec.UNSPECIFIED);
	        totalHeight += view.getMeasuredHeight();
	    }
	    ViewGroup.LayoutParams params = listView.getLayoutParams();
	    params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));
	    listView.setLayoutParams(params);
	    listView.requestLayout();
	}
	
	private class ApplyViewParamsTask extends AsyncTask<String, Void, String> {
		
		@Override
	    protected void onPreExecute() {
			layout_progressbar.setVisibility(View.VISIBLE);
	        super.onPreExecute();
	    }
		
		protected String doInBackground(String...params) {
			// TODO Auto-generated method stub
			return "Done";
		}
		
	    protected void onPostExecute(String params) {
	    	//headersection.setVisibility(View.GONE);
		    SELECTED_BRAND_ID = sharedPreferences.getString("selectedBrandId", null);
			SELECTED_BRAND_TITLE = sharedPreferences.getString("selectedBrand", null);
			SELECTED_BRAND_LOGO = sharedPreferences.getString("selectedBrandLogo", null);
			SELECTED_BRANCH_ID = sharedPreferences.getString("selectedBranchId", null);
			SELECTED_BRANCH_TITLE = sharedPreferences.getString("selectedBranch", null);
			SELECTED_LOCATION_ID = sharedPreferences.getString("selectedLocationId", null);
			SELECTED_LOCATION = sharedPreferences.getString("selectedLocation", null);
			SELECTED_DELIVERY_CHARGES = sharedPreferences.getString("selectedBranchDeliveryCharges", null);
			CUSTOMER_FIRST_NAME = sharedPreferences.getString("customerFirstName", null);
			CUSTOMER_LAST_NAME = sharedPreferences.getString("customerLastName", null);
			CUSTOMER_EMAIL_ADDRESS = sharedPreferences.getString("customerEmail", null);
			CUSTOMER_PHONE_NUMBER = sharedPreferences.getString("userPhoneNumber", null);
			CUSTOMER_ADDRESS = sharedPreferences.getString("deliveryAddress", null);
			
			//DOWNLOAD OUTLET LOGO
	        ImageDownloader imageDownloader = new ImageDownloader();
	        imageDownloader.download(SELECTED_BRAND_LOGO, shopLogoview);

	    	shopDetails.setText(SELECTED_BRAND_TITLE+" "+SELECTED_BRANCH_TITLE);
			userName.setText(CUSTOMER_FIRST_NAME + " " + CUSTOMER_LAST_NAME);
			emailAddress.setText(CUSTOMER_EMAIL_ADDRESS);
			phoneNumber.setText(" - "+CUSTOMER_PHONE_NUMBER);
			if(sharedPreferences.getString("deliverShopping", null).equals("No")){
				delivery.setText("Pick Up");
			}else{
				delivery.setText(CUSTOMER_ADDRESS);
			}
			
	  		
			pay.setOnClickListener(new View.OnClickListener() {
	            @Override
	            public void onClick(View v) {
	            	Intent intent = new Intent(ActivityStep11MyReceipt.this, ActivityStep12ThankYou.class);
		    	    startActivity(intent);
	                
	            }
	        });
			
			
	    }
	    
	 }

}
