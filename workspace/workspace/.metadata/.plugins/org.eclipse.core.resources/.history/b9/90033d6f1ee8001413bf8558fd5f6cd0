package com.redhering.nunuaraha;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.redhering.nunuaraha.R;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ListActivity;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class ActivityMyCart extends Activity {
	public static final String MY_SESSION = "mySession";
    SharedPreferences sharedPreferences;
    SharedPreferences.Editor editor;
	
	ArrayList<RequestedResults> MYCART;
	AdapterMyCart myadapter;
	
	ArrayList<RequestedResultsSimpleList> AISLELIST;
	AdapterMenu menuadapter;
	
	LinearLayout layout_progressbar;
	RelativeLayout headersection;
	RelativeLayout footersection;
	LinearLayout rlMenu;
	ListView listView;
	ListView menuListView;
    public Integer TOTAL = 0;
	public static String SELECTED_BRANCH_ID;
	public static String SELECTED_BRANCH_TITLE;
	public static String SELECTED_BRAND_ID;
	public static String SELECTED_BRAND_TITLE;
	public static String SELECTED_BRAND_LOGO;
	Typeface EkMukta_Light;
	TextView app_name;
	TextView headerText;
	TextView previousListLink;
	TextView cartButtonNotification;
	TextView subtitle;
	Button shoppingButton;
	Button homeButton;
	Button accountButton;
	Button cartButton;
	Button checkout;
	Button clearcart;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.shoppingcart_scroller);
		listView = (ListView) findViewById(R.id.productsListView);
		menuListView = (ListView) findViewById(R.id.menuListView);
		layout_progressbar = (LinearLayout) findViewById(R.id.progressbar_view);
	    headersection = (RelativeLayout) findViewById(R.id.header);
	    footersection = (RelativeLayout) findViewById(R.id.footer);
  		rlMenu = (LinearLayout) findViewById(R.id.menuListViewCont);
	    sharedPreferences = getSharedPreferences(MY_SESSION,Context.MODE_PRIVATE);
	    editor = sharedPreferences.edit();
		EkMukta_Light = Typeface.createFromAsset(getAssets(),"fonts/ek_mukta/EkMukta-Light.ttf");
  		app_name = (TextView) findViewById(R.id.app_name);
		headerText = (TextView) findViewById(R.id.headerText);
		shoppingButton = (Button) findViewById(R.id.shoppingButton);
  		homeButton = (Button) findViewById(R.id.homeButton);
  		accountButton = (Button) findViewById(R.id.accountButton);
  		cartButton = (Button) findViewById(R.id.cartButton);
  		cartButtonNotification = (TextView) findViewById(R.id.cartButtonNotification);
  		subtitle = (TextView) findViewById(R.id.subtitle);
		checkout = (Button) findViewById(R.id.checkout);
		clearcart = (Button) findViewById(R.id.clearcart);
		
		//SET TEXT, APPLY FONTS, SETONCLICKLISTENERS
  		new ApplyViewParamsTask().execute();
		
  		//LIST VIEW
        new populateListViewTask().execute(); 
  		MYCART = new ArrayList<RequestedResults>();
		myadapter = new AdapterMyCart(ActivityMyCart.this, MYCART);
		listView.setAdapter(myadapter);
        
        
        //MENU LIST VIEW
        AISLELIST = new ArrayList<RequestedResultsSimpleList>();
		menuadapter = new AdapterMenu(ActivityMyCart.this, AISLELIST,EkMukta_Light);
		menuListView.setAdapter(menuadapter);
		new TopMenuTask().execute();
  		
	}
	
	@Override
	public void onBackPressed() {
		finish();
	}
	
	@Override
	public void onResume() {
		super.onResume();  // Always call the superclass method first
		
		myadapter = new AdapterMyCart(ActivityMyCart.this, MYCART);
		listView.setAdapter(myadapter);
		myadapter.notifyDataSetChanged();
		
		menuadapter = new AdapterMenu(ActivityMyCart.this, AISLELIST,EkMukta_Light);
		menuListView.setAdapter(menuadapter);
		menuadapter.notifyDataSetChanged();
	}

	private static String convertInputStreamToString(InputStream inputStream) throws IOException{
        BufferedReader bufferedReader = new BufferedReader( new InputStreamReader(inputStream));
        String line = "";
        String result = "";
        while((line = bufferedReader.readLine()) != null)
            result += line;
 
        inputStream.close();
        return result;
 
    }

	private class populateListViewTask extends AsyncTask<String, Void, String> {
		
		@Override
	    protected void onPreExecute() {
	        super.onPreExecute();
	    }
		
		protected String doInBackground(String...params) {
			// TODO Auto-generated method stub
			return "Done";
		}
		
	    protected void onPostExecute(String params) {
	    	layout_progressbar.setVisibility(View.GONE);
            listView.setVisibility(View.VISIBLE);
      		listView.setDividerHeight(0);
            myadapter.notifyDataSetChanged();
            
            Map<String, Integer> cartUnitList = new HashMap<String, Integer>();
            if(sharedPreferences.contains("myTrolley")) {
                String getCartList = sharedPreferences.getString("myTrolley", null);
                Gson gson = new Gson();
                List[] jsonCartList = gson.fromJson(getCartList,List[].class);
                List<List> getjsonCartListCont = Arrays.asList(jsonCartList);
                
                Object getObject = getjsonCartListCont.get(0);
                ArrayList<?> cartList = (ArrayList<?>) getObject;
                
                for(int i = 0; i < cartList.size(); i++){
                	Object cartItem = cartList.get(i);
                	ArrayList<?> cartItemInfo = (ArrayList<?>) cartItem;
                	String item_id = cartItemInfo.get(0).toString();
                	
                	Integer units = 1;
                	if(cartUnitList.containsKey(item_id)){
                		units = cartUnitList.get(item_id);
                		units++;
                	}
                	cartUnitList.put(item_id, units);
                }
            }
            
            if(sharedPreferences.contains("myTrolley")) {
                String getCartList = sharedPreferences.getString("myTrolley", null);
                Gson gson = new Gson();
                List[] jsonCartList = gson.fromJson(getCartList,List[].class);
                List getjsonCartListCont = Arrays.asList(jsonCartList);
                
                Object getObject = getjsonCartListCont.get(0);
                ArrayList cartList = (ArrayList) getObject;
                
                for(int i = 0; i < cartList.size(); i++){
                	Object cartItem = cartList.get(i);
                	ArrayList cartItemInfo = (ArrayList) cartItem;
                    
                	String item_id = cartItemInfo.get(0).toString();
                	String item_title = cartItemInfo.get(1).toString();
                	String item_price = cartItemInfo.get(2).toString();
                	String item_size = cartItemInfo.get(3).toString();
                	String item_thumbnail_url = cartItemInfo.get(4).toString();
                	
                	Integer item_units_in_cart = 0;
    				if(!cartUnitList.isEmpty()){
    					item_units_in_cart = cartUnitList.get(item_id);
    				}
                	
                	TOTAL = TOTAL + Integer.parseInt(item_price);
                	Log.i(item_title," --> " + item_price);
                	Log.i("Total"," --> " + TOTAL);
					
					RequestedResults d = new RequestedResults();
					
					d.setId(item_id);
					d.setTitle(item_title);
					d.setPrice(item_price);
					d.setSize(item_size);
					d.setThumbnailUrl(item_thumbnail_url);
					d.setUnits(item_units_in_cart);
					
				    d.item_id = item_id;
				    d.item_title = item_title;
				    d.item_price = item_price;
				    d.item_size = item_size;
				    d.item_thumbnail_url = item_thumbnail_url;
				    d.item_units_in_cart = item_units_in_cart;
				    
				    MYCART.add(d);
	            	
            	}
                
                //FORMAT PRICE
                DecimalFormat precision = new DecimalFormat("0.00");
    			Double total_double = Double.parseDouble(TOTAL.toString()); 
    			String total_price = precision.format(total_double);
    			subtitle.setText("Cart(KES."+total_price+")");
            }
	    }
	    
	 }
	
	private class TopMenuTask extends AsyncTask<String, Void, String> {
		
		@Override
	    protected void onPreExecute() {
	        super.onPreExecute();
	    }
		
		protected String doInBackground(String...params) {
			// TODO Auto-generated method stub
			return "Done";
		}
		
	    protected void onPostExecute(String params) {
	    	//MENU
	        ImageView menuIcon  = (ImageView) findViewById(R.id.menu_icon);
	        menuIcon.setOnClickListener(new View.OnClickListener() {
	            @Override
	            public void onClick(View v) {
	            	if (rlMenu.getVisibility() == View.VISIBLE) {
	            		rlMenu.setVisibility(View.INVISIBLE);
	                    overridePendingTransition(R.anim.slide_in_right_to_left, R.anim.slide_out_left_to_right);
	            	} else {
	            		rlMenu.setVisibility(View.VISIBLE);
	                    overridePendingTransition(R.anim.slide_out_left_to_right, R.anim.slide_in_right_to_left);
	            	}
	                
	            }
	        });
	    }
	    
	 }
	
	private class ApplyViewParamsTask extends AsyncTask<String, Void, String> {
		
		@Override
	    protected void onPreExecute() {
	        super.onPreExecute();
	    }
		
		protected String doInBackground(String...params) {
			// TODO Auto-generated method stub
			return "Done";
		}
		
	    protected void onPostExecute(String params) {
		    SELECTED_BRAND_ID = sharedPreferences.getString("selectedBrandId", null);
			SELECTED_BRAND_TITLE = sharedPreferences.getString("selectedBrand", null);
			SELECTED_BRAND_LOGO = sharedPreferences.getString("selectedBrandLogo", null);
			SELECTED_BRANCH_ID = sharedPreferences.getString("selectedBranchId", null);
			SELECTED_BRANCH_TITLE = sharedPreferences.getString("selectedBranch", null);
	    	headerText.setText(SELECTED_BRANCH_TITLE);
		    app_name.setTypeface(EkMukta_Light);
			cartButton.setTextColor(getResources().getColor(R.color.green));
	  		
		    //ADD BRAND LOGO
	    	footersection.setVisibility(View.VISIBLE);
	    	ImageView logoview = (ImageView) findViewById(R.id.shopLogo);
			Bitmap logo = null;
			try {
				logo = new DownloadImageTask(logoview).execute(SELECTED_BRAND_LOGO).get();
				logoview.setImageBitmap(logo); 
				//headersection.addView(logoview); 
				RelativeLayout.LayoutParams logoParams = (RelativeLayout.LayoutParams) logoview.getLayoutParams();
				logoParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
				logoParams.addRule(RelativeLayout.CENTER_VERTICAL);
				logoview.setLayoutParams(logoParams);
			} catch (InterruptedException | ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 

	  		//SET ONCLICKLISTENER
			checkout.setOnClickListener(new View.OnClickListener() {
	            public void onClick(View v) {
	            	if(sharedPreferences.contains("userPhoneNumber") && sharedPreferences.contains("userFirstName")) {
		            	Intent intent = new Intent(ActivityMyCart.this, ActivityShopperDetails.class);
			    		intent.putExtra("totalPrice", TOTAL.toString());
			    	    startActivity(intent);
	            	}else{
	            		Intent intent = new Intent(ActivityMyCart.this, ActivityMyAccountLogin.class);
			    		intent.putExtra("prevActivity", "ActivityMyCart");
			    		intent.putExtra("totalPrice", TOTAL.toString());
			    		
			    	    startActivity(intent);
	            	}
	            	
	            }
	        });
			
			clearcart.setOnClickListener(new View.OnClickListener() {
	            public void onClick(View v) {
	            	try
	                {
	            		showDialogEmptyTrolley("Empty Cart?");
	                }
	                catch (Exception e) 
	                {
	                    e.printStackTrace();
	                }
	            }
	        });
			
			shoppingButton.setOnClickListener(new View.OnClickListener() {
	            @Override
	            public void onClick(View v) {
	            	layout_progressbar.setVisibility(View.VISIBLE);
	            	Intent intent = new Intent(ActivityMyCart.this, ActivityListOutlets.class);
	            	if(sharedPreferences.contains("myTrolley")) {
	            		intent = new Intent(ActivityMyCart.this, ActivityListAisles.class);
	            	}
		    	    startActivity(intent);
	            }
	        }); 
	  		homeButton.setOnClickListener(new View.OnClickListener() {
	            @Override
	            public void onClick(View v) {
	            	Intent intent = new Intent(ActivityMyCart.this, ActivityMain.class);
		    	    startActivity(intent);
	                
	            }
	        }); 
	  		
	  		accountButton.setOnClickListener(new View.OnClickListener() {
	            @Override
	            public void onClick(View v) {
	            	Intent intent = new Intent(ActivityMyCart.this, ActivityMyAccountLogin.class);
		    	    startActivity(intent);
	                
	            }
	        }); 
	        
	        //SET NOTIFICATION FOR THE NUMBER OF ITEMS CURRENTLY IN THE TROLLEY
			if(sharedPreferences.contains("myTrolley")) {
				String inMyTrolley = sharedPreferences.getString("myTrolley", null);
				Gson gson = new Gson();
				List[] jsonMyTrolley = gson.fromJson(inMyTrolley,List[].class);
                List getjsonMyTrolley = Arrays.asList(jsonMyTrolley);
                
                Object getObject = getjsonMyTrolley.get(0);
                ArrayList myTrolley = (ArrayList) getObject;
                Integer numberOfItemsInMyTrolley = myTrolley.size();
                cartButtonNotification.setText(numberOfItemsInMyTrolley.toString());
                
			}else{
				cartButtonNotification.setText("0");
    	  		cartButton.setOnClickListener(new View.OnClickListener() {
    	            @Override
    	            public void onClick(View v) {
    	            	Toast.makeText(getBaseContext(), "Your cart is empty!", Toast.LENGTH_LONG).show();
    	            }
    	        });
			}

	  		
	    }
	 }
		
	public void showDialogEmptyTrolley(final String message) throws Exception{
        AlertDialog.Builder builder = new AlertDialog.Builder(ActivityMyCart.this);
        builder.setMessage("You will lose all the items in your cart. " + message);       

        builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                //Clear Cart Session
                sharedPreferences.edit().remove("myTrolley").commit();
                
                Intent intent = new Intent(ActivityMyCart.this, ActivityListAisles.class);
	    		startActivity(intent);
                
                //Go back to previous page
                //finish();
                dialog.dismiss();
            }
        });

        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {   
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });

        builder.show();
    }
	
	public static String GET(String url){
        InputStream inputStream = null;
        String result = "";

        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
        
        try {
 
            // create HttpClient
            HttpClient httpclient = new DefaultHttpClient();
            
            HttpPost httppost = new HttpPost(url);
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            
            // make GET request to the given URL
            HttpResponse response = httpclient.execute(httppost);
            
            // receive response as inputStream
            inputStream = response.getEntity().getContent();
 
            // convert inputstream to string
            if(inputStream != null){
                result = convertInputStreamToString(inputStream);
            }else{
                result = "Did not work!";
            }
 
        } catch (Exception e) {
            Log.d("InputStream", e.getLocalizedMessage());
        }
 
        return result;
    }

	private class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
        ImageView bmImage;

        public DownloadImageTask(ImageView bmImage) {
            this.bmImage = bmImage;
        }

        protected Bitmap doInBackground(String... urls) {
            String urldisplay = urls[0];
            Bitmap mIcon11 = null;
            try {
                InputStream in = new java.net.URL(urldisplay).openStream();
                mIcon11 = BitmapFactory.decodeStream(in);
            } catch (Exception e) {
                Log.e("Error", e.getMessage());
                e.printStackTrace();
            }
            return mIcon11;
        }

        protected void onPostExecute(Bitmap result) {
            //bmImage.setImageBitmap(result);
        }
    }
	
	
	
	
	

}
