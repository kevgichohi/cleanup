package com.redhering.nunuaraha;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;


import android.app.Activity;
import android.app.ListActivity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

import com.google.gson.Gson;
import com.redhering.nunuaraha.R;

public class ActivityListOutlets extends Activity {
	
	ListView listView;
	LinearLayout layout_progressbar;
	ListView menuListView;
	LinearLayout listViewCont;
	
	ArrayList<RequestedResultsSimpleList> OUTLETS;
	AdapterSimpleList myadapter;
	
	ArrayList<RequestedResultsSimpleList> MENU;
	AdapterMenu menuadapter;

	public static final String MY_SESSION = "mySession";
    SharedPreferences sharedPreferences;
    SharedPreferences.Editor editor;

	public static String BREADCRUMB;
	
	Typeface EkMukta_Light;
	TextView app_name;
	TextView previousListLink;
	LinearLayout rlMenu;
	TextView headerText;
	TextView breadcrumb;
	Button backButton;
	Button homeButton;
	Button accountButton;
	Button cartButton;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.simple_list_scroller);
		listView = (ListView) findViewById(R.id.simpleListView);
		menuListView = (ListView) findViewById(R.id.menuListView);
		layout_progressbar = (LinearLayout) findViewById(R.id.progressbar_view);
	    sharedPreferences = getSharedPreferences(MY_SESSION,MODE_PRIVATE);
	    editor = sharedPreferences.edit();
	    
	    BREADCRUMB = "HOME / OUTLETS";
	    editor.putString("breadcrumbs",BREADCRUMB);
  		
	    EkMukta_Light = Typeface.createFromAsset(getAssets(),"fonts/ek_mukta/EkMukta-Light.ttf");
  		app_name = (TextView) findViewById(R.id.app_name);
		headerText = (TextView) findViewById(R.id.headerText);
		breadcrumb = (TextView) findViewById(R.id.breadcrumb);
  		backButton = (Button) findViewById(R.id.backButton);
  		homeButton = (Button) findViewById(R.id.homeButton);
  		accountButton = (Button) findViewById(R.id.accountButton);
  		cartButton = (Button) findViewById(R.id.cartButton);
		
  		
  		//SET TEXT, APPLY FONTS, SETONCLICKLISTENERS
  		new ApplyViewParamsTask().execute();
		
		//MENU
		previousListLink = (TextView) findViewById(R.id.previousListLink);
		previousListLink.setVisibility(View.INVISIBLE);
  		rlMenu = (LinearLayout) findViewById(R.id.menuListViewCont);
  		rlMenu.setVisibility(View.INVISIBLE);
        final ImageView menuIcon  = (ImageView) findViewById(R.id.menu_icon);
        menuIcon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
            	if (rlMenu.getVisibility() == View.VISIBLE) {
            		rlMenu.setVisibility(View.INVISIBLE);
                    overridePendingTransition(R.anim.slide_in_right_to_left, R.anim.slide_out_left_to_right);
                    menuIcon.setImageResource(R.drawable.ic_menu_icon);
            	} else {
            		rlMenu.setVisibility(View.VISIBLE);
                    overridePendingTransition(R.anim.slide_out_left_to_right, R.anim.slide_in_right_to_left);
                    menuIcon.setImageResource(R.drawable.ic_menu_icon_close);
            	}
                
            }
        }); 
        
        //MENU LIST VIEW
        MENU = new ArrayList<RequestedResultsSimpleList>();
		menuadapter = new AdapterMenu(ActivityListOutlets.this, MENU,EkMukta_Light);
		menuListView.setAdapter(menuadapter);
		menuListView.setTextFilterEnabled(true);
		menuListView.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
			    Intent intent = new Intent(ActivityListOutlets.this, ActivityMain.class);
	    	    startActivity(intent);
			}
		});
		
		//LIST VIEW
		new HttpAsyncTask().execute("http://www.smokesignal.co.ke/mobile_trolley_app/getshops.php"); // call AsynTask to perform network operation on separate thread
		listView.setDividerHeight(0); //remove the default divider line
		OUTLETS = new ArrayList<RequestedResultsSimpleList>();
		myadapter = new AdapterSimpleList(ActivityListOutlets.this, OUTLETS,EkMukta_Light);
		listView.setAdapter(myadapter);
		
		listView.setTextFilterEnabled(true);
		listView.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				
				RequestedResultsSimpleList  item = (RequestedResultsSimpleList) listView.getItemAtPosition(position);
				try
		        {
					String currentOutlet = sharedPreferences.getString("selectedOutlet", null);
					String currentOutletId = sharedPreferences.getString("selectedOutletId", null);
					String currentBrand = sharedPreferences.getString("selectedBrand", null);
					String currentBranch = sharedPreferences.getString("selectedBranch", null);
					
					if(sharedPreferences.contains("selectedOutletId")){
						if(sharedPreferences.contains("myTrolley") && !currentOutletId.equals(item.item_id)){
							showDialogSelectBranch(item, position, currentBrand + " " + currentBranch + "?");
						}else{
						    Intent intent = new Intent(ActivityListOutlets.this, ActivityListAisles.class);
				    	    startActivity(intent);
						}
					}else{
						editor.putString("selectedBranch",item.item_title);
			            editor.putString("selectedBranchId",item.item_id);
			            editor.putString("selectedBranchDeliveryCharges",item.delivery_charge);
			            editor.commit();
			            
					    Intent intent = new Intent(ActivityListOutlets.this, ActivityListAisles.class);
			    	    startActivity(intent);
					}
					
		        }
		        catch (Exception e) 
		        {
		            e.printStackTrace();
		        }
				
			    RequestedResultsSimpleList  item = (RequestedResultsSimpleList) listView.getItemAtPosition(position);
			    
			    //ADD TO SESSION
	            editor.putString("selectedOutlet",item.item_title);
	            editor.putString("selectedOutletId",item.item_id);
	            editor.commit();
	            
			    Intent intent = new Intent(ActivityListOutlets.this, ActivityListBrands.class);
	    		intent.putExtra("breadcrumb", BREADCRUMB);
	    	    startActivity(intent);
			}
		});
		
	}
	
	@Override
	public void onBackPressed() {
	}

	private static String convertInputStreamToString(InputStream inputStream) throws IOException{
        BufferedReader bufferedReader = new BufferedReader( new InputStreamReader(inputStream));
        String line = "";
        String result = "";
        while((line = bufferedReader.readLine()) != null)
            result += line;
 
        inputStream.close();
        return result;
 
    }
	
	private class HttpAsyncTask extends AsyncTask<String, Void, String> {
		@Override
	    protected void onPreExecute() {
			layout_progressbar.setVisibility(View.VISIBLE);
	        listView.setVisibility(View.GONE);
	        menuListView.setVisibility(View.VISIBLE);
	        super.onPreExecute();
	    }
		
        // onPostExecute displays the results of the AsyncTask.
        @Override
        protected void onPostExecute(String result) {
        	layout_progressbar.setVisibility(View.GONE);
            listView.setVisibility(View.VISIBLE);
            myadapter.notifyDataSetChanged();
            menuListView.setVisibility(View.VISIBLE);
            menuadapter.notifyDataSetChanged();
            super.onPostExecute(result);
            
            Toast.makeText(getBaseContext(), "Outlets Received!", Toast.LENGTH_LONG).show();
            
	        try {
				JSONArray jsonArr = new JSONArray(result);
	        	String[] list_item_ids = new String[jsonArr.length()];
				String[] list_item_titles = new String[jsonArr.length()];
				
				ArrayList<ArrayList<ArrayList<String>>> outletsIdListCont = new ArrayList<ArrayList<ArrayList<String>>>(); //Outer Array
				ArrayList<ArrayList<String>> outletsIdList = new ArrayList<ArrayList<String>>(); //Inner Array
	        	
				for(int i = 0; i < jsonArr.length(); i++){
					JSONObject jsonObj = jsonArr.getJSONObject(i); 
					String item_id = jsonObj.getString("id");
					String item_title = jsonObj.getString("title");
					
					ArrayList<String> outlestListInfo = new ArrayList<String>(); //Inner array
					outlestListInfo.add(item_id);
					outlestListInfo.add(item_title);
					outletsIdList.add(new ArrayList<String>(outlestListInfo)); 
					
					list_item_ids[i] = item_id;
					list_item_titles[i] = item_title;
					
					RequestedResultsSimpleList d = new RequestedResultsSimpleList();
					
					d.setTitle(item_title);
					
				    d.item_id = item_id;
				    d.item_title = item_title;
				    OUTLETS.add(d);
				}
				
				//ADD INNER ARRAY TO OUTER ARRAY
				outletsIdListCont.add(new ArrayList<ArrayList<String>>(outletsIdList)); 
				outletsIdList.clear();
	    		Gson gson = new Gson();
	            String jsonOutletsIdList = gson.toJson(outletsIdListCont);
	            editor.putString("outlestIdList", jsonOutletsIdList);
	            editor.commit();
	            
			}catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        
	        RequestedResultsSimpleList m = new RequestedResultsSimpleList();
		    m.setId("0");
			m.setTitle("HOME");
				
			m.item_id = "0";
			m.item_title = "HOME";
			MENU.add(m);
       }
        
            
        
		@Override
        protected String doInBackground(String... urls) {
 
            return GET(urls[0]);
        }
		
		protected void onResume() {
		    // TODO Auto-generated method stub
		    //super.onResume();
			layout_progressbar.setVisibility(View.GONE);
	        listView.setVisibility(View.VISIBLE);
	        //myadapter.notifyDataSetChanged();

		}
	}
	
	private class ApplyViewParamsTask extends AsyncTask<String, Void, String> {
		
		@Override
	    protected void onPreExecute() {
			layout_progressbar.setVisibility(View.VISIBLE);
	        super.onPreExecute();
	    }
		
		protected String doInBackground(String...params) {
			// TODO Auto-generated method stub
			return "Done";
		}
		
	    protected void onPostExecute(String params) {
	    	//SET TEXTS
	    	headerText.setText("OUTLETS");
	    	breadcrumb.setText(BREADCRUMB);
	    	
	    	//APPLY FONTS
		    app_name.setTypeface(EkMukta_Light);
		 	headerText.setTypeface(EkMukta_Light);
		 	breadcrumb.setTypeface(EkMukta_Light);
		    backButton.setTypeface(EkMukta_Light);
		    homeButton.setTypeface(EkMukta_Light);
	  		accountButton.setTypeface(EkMukta_Light);
	  		cartButton.setTypeface(EkMukta_Light);


	  		//SET ONCLICKLISTENER
	  		backButton.setOnClickListener(new View.OnClickListener() {
	            @Override
	            public void onClick(View v) {
	        		finish();
	            }
	        }); 
	  		
	  		homeButton.setOnClickListener(new View.OnClickListener() {
	            @Override
	            public void onClick(View v) {
	            	Intent intent = new Intent(ActivityListOutlets.this, ActivityMain.class);
		    	    startActivity(intent);
	                
	            }
	        }); 
	  		
	  		accountButton.setOnClickListener(new View.OnClickListener() {
	            @Override
	            public void onClick(View v) {
	            	Intent intent = new Intent(ActivityListOutlets.this, ActivityMyAccount.class);
		    	    startActivity(intent);
	                
	            }
	        }); 
	  		
	  		//SET NOTIFICATION FOR THE NUMBER OF ITEMS CURRENTLY IN THE TROLLEY
			TextView cartButtonNotification = (TextView) findViewById(R.id.cartButtonNotification);
			if(sharedPreferences.contains("myTrolley")) {
				String inMyTrolley = sharedPreferences.getString("myTrolley", null);
				Gson gson = new Gson();
				List[] jsonMyTrolley = gson.fromJson(inMyTrolley,List[].class);
                List getjsonMyTrolley = Arrays.asList(jsonMyTrolley);
                
                Object getObject = getjsonMyTrolley.get(0);
                ArrayList myTrolley = (ArrayList) getObject;
                Integer numberOfItemsInMyTrolley = myTrolley.size();
                cartButtonNotification.setText(numberOfItemsInMyTrolley.toString());
                
    	  		cartButton.setOnClickListener(new View.OnClickListener() {
    	            @Override
    	            public void onClick(View v) {
    	            	Intent intent = new Intent(ActivityListOutlets.this, ActivityMyCart.class);
    		    	    startActivity(intent);
    	                
    	            }
    	        });
			}else{
				cartButtonNotification.setText("0");
    	  		cartButton.setOnClickListener(new View.OnClickListener() {
    	            @Override
    	            public void onClick(View v) {
    	            	Toast.makeText(getBaseContext(), "Your cart is empty!", Toast.LENGTH_LONG).show();
    	            }
    	        });
			}
	    }
	    
	 }
	
	public static String GET(String url){
        InputStream inputStream = null;
        String result = "";
        
        try {
 
            // create HttpClient
            HttpClient httpclient = new DefaultHttpClient();
            
            HttpPost httppost = new HttpPost(url);
            
            // make GET request to the given URL
            HttpResponse response = httpclient.execute(httppost);
            
            // receive response as inputStream
            inputStream = response.getEntity().getContent();
 
            // convert inputstream to string
            if(inputStream != null){
                result = convertInputStreamToString(inputStream);
            }else{
                result = "Did not work!";
            }
 
        } catch (Exception e) {
            Log.d("InputStream", e.getLocalizedMessage());
        }
 
        return result;
    }
	
	
}
