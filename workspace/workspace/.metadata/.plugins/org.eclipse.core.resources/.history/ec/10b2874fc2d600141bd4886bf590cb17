package com.redhering.nunuaraha;

import android.net.Uri;
import android.os.AsyncTask;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Toast;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutionException;

import com.google.gson.Gson;
import com.redhering.nunuaraha.R;
 
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Typeface;
import android.graphics.BitmapFactory.Options;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.widget.TextView;
 
public class AdapterMyCart extends BaseAdapter implements android.view.View.OnClickListener {
	private static ArrayList<RequestedResults> myCart;
    private LayoutInflater mInflater;
    private Context context;
    private int resource;
    
    public static final String MY_SESSION = "mySession";
    SharedPreferences sharedPreferences;
    Gson gson;
    Typeface EkMukta_Light;
 
    public AdapterMyCart(Context ctx, ArrayList<RequestedResults> results) {
    	myCart = results;
        mInflater = LayoutInflater.from(ctx);
        context=ctx;
  		EkMukta_Light = Typeface.createFromAsset(context.getAssets(),"fonts/ek_mukta/EkMukta-Light.ttf");
  		sharedPreferences = context.getSharedPreferences(MY_SESSION,Context.MODE_PRIVATE);
        gson = new Gson();
    }
 
    public int getCount() {
        return myCart.size();
    }
 
    public Object getItem(int position) {
        return myCart.get(position);
    }
 
    public long getItemId(int position) {
        return position;
    }
 
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;
        if (convertView == null) {
            convertView = mInflater.inflate(R.layout.products, null);
            holder = new ViewHolder();
            holder.title = (TextView) convertView.findViewById(R.id.title);
            holder.size = (TextView) convertView.findViewById(R.id.size);
            holder.price = (TextView) convertView.findViewById(R.id.price);
            holder.thumbnail = (ImageView) convertView.findViewById(R.id.thumbnail);
            holder.removetocart = (ImageView) convertView.findViewById(R.id.addtocart);
            
 
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
 
        holder.title.setText(myCart.get(position).getTitle());
        holder.title.setTypeface(EkMukta_Light);
        
        holder.size.setText(myCart.get(position).getSize());
        holder.size.setTypeface(EkMukta_Light);
        
        String price = myCart.get(position).getPrice();
        if(android.text.TextUtils.isEmpty(price) == false && android.text.TextUtils.isDigitsOnly(price)){
			DecimalFormat precision = new DecimalFormat("0.00");
			Double item_price_double = Double.parseDouble(myCart.get(position).getPrice()); 
			String item_price = "KES. " + precision.format(item_price_double);
	        holder.price.setText(item_price);
	  		holder.price.setTypeface(EkMukta_Light);
        }else{
        	holder.price.setVisibility(View.GONE);
        }
        
        // download image
        ImageDownloader imageDownloader = new ImageDownloader();
        imageDownloader.download(myCart.get(position).getThumbnailUrl(), holder.thumbnail);

        holder.removetocart.setTag(myCart.get(position).getId());
        holder.removetocart.setImageResource(R.drawable.removefromcart);
        holder.removetocart.setOnClickListener(this);
        
        return convertView;
    }
    

	static class ViewHolder {
        TextView title;
        TextView size;
        TextView price;
        ImageView thumbnail;
        ImageView removetocart;
    }
    
    private class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
        ImageView bmImage;

        public DownloadImageTask(ImageView bmImage) {
            this.bmImage = bmImage;
        }

        protected Bitmap doInBackground(String... urls) {
            String urldisplay = urls[0];
            Bitmap mIcon11 = null;
            try {
                InputStream in = new java.net.URL(urldisplay).openStream();
                mIcon11 = BitmapFactory.decodeStream(in);
            } catch (Exception e) {
                Log.e("Error", e.getMessage());
                e.printStackTrace();
            }
            return mIcon11;
        }

        protected void onPostExecute(Bitmap result) {
            //bmImage.setImageBitmap(result);
        }
    }
 
    @Override
    public void onClick(View v) {
    	View parentRow = (View) v.getParent();
		ListView listView = (ListView) parentRow.getParent();
		final int position = listView.getPositionForView(parentRow);
		RequestedResults  item = (RequestedResults) listView.getItemAtPosition(position);
		
    	try
        {
    		showDialogRemoveFronCart(item, position, "Remove Item?");
        }
        catch (Exception e) 
        {
            e.printStackTrace();
        }
        
    }
    
    public void showDialogRemoveFronCart(final RequestedResults item, final int position, final String message) throws Exception{
        AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setMessage("This Item will be removed from your trolley. " + message);     

        builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
            	
            	ArrayList<ArrayList<ArrayList<String>>> inMyTrolleyCont = new ArrayList<ArrayList<ArrayList<String>>>();  //Container Array
            	
                String getCartList = sharedPreferences.getString("myTrolley", null);
                List[] jsonCartList = gson.fromJson(getCartList,List[].class);
                List getjsonCartListCont = Arrays.asList(jsonCartList);
                 
                Object getObject = getjsonCartListCont.get(0);
                ArrayList cartList = (ArrayList) getObject;
                 
                cartList.remove(position);
                
                inMyTrolleyCont.add(cartList); 
                
             	//UPDATE SESSION
        	    SharedPreferences.Editor editor = sharedPreferences.edit();
                String myCart = gson.toJson(inMyTrolleyCont);
                editor.putString("myTrolley", myCart);
                editor.commit();
                
                Toast.makeText(context, item.item_title+" removed" , Toast.LENGTH_SHORT).show();
                Log.i("Removed from cart", " --> " + item.item_title);
            	
                Intent intent = new Intent(context,ActivityMyCart.class);
                context.startActivity(intent);
                
                dialog.dismiss();
            }
        });

        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {   
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });

        builder.show();
    }

	private Context getContext() {
		// TODO Auto-generated method stub
		return null;
	}

}
