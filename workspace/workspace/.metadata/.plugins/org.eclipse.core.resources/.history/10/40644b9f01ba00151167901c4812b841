package com.redhering.nunuaraha;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EncodingUtils;
import org.apache.http.util.EntityUtils;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Typeface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.redhering.nunuaraha.R;

public class ActivityStep11PaymentOptionsGateway extends Activity {
	public static final String MY_SESSION = "mySession";
	SharedPreferences sharedPreferences;
    SharedPreferences.Editor editor;
	public static ArrayList<RequestedResultsSimpleList> DELIVERYOPTIONS;
	AdapterSimpleList myadapter;
	
	LinearLayout layout_progressbar;
	RelativeLayout headersection;
	public static String SELECTED_BRANCH_ID;
	public static String SELECTED_BRANCH_TITLE;
	public static String SELECTED_BRAND_ID;
	public static String SELECTED_BRAND_TITLE;
	public static String SELECTED_BRAND_LOGO;
	public static String SELECTED_OUTLET_ID;
	public static String SELECTED_OUTLET_TITLE;
	public static String USER_PHONE_NUMBER;
	Typeface EkMukta_Light;
	TextView app_name;
	Button menuIcon;
	TextView cartButtonNotification;
	TextView headerText;
	Button shoppingButton;
	Button cartButton;
	WebView webView;
	ImageView shopLogoview;
    String extStorageDirectory;
    Bitmap bm;
    
    TextView creditCardNumber1;
    TextView creditCardExpiry1;
    TextView creditCardCVV1;
    TextView cardHolderName1;
    TextView cardHolderID1;
    Button processPayment1;
    Button mpesaPayment1;
    Button airtelPayment1;
    
    EditText mobilepaymentNumber1;
    Button MobiprocessPayment1;
    
    EditText mobilempaymentNumber1;
    Button MobimprocessPayment1;

	private	ImageView headerTextimage2;
	
    
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_payment_options_gatewaymobile);
		overridePendingTransition(R.anim.slide_page_in,R.anim.slide_page_out);//SlideIn animation
		initViews();
  		
  		if(sharedPreferences.contains("loggedIn") && sharedPreferences.contains("customerInfo")) {
  			headerText.setText("Payment Options");
  			
			headerTextimage2 = (ImageView) findViewById(R.id.headerTextimage);
			headerTextimage2.setVisibility(View.VISIBLE);
			headerTextimage2.setImageResource(R.drawable.paymentmode);
  			
			//LOAD QUICKLINKS
	  		HelperQuickLinks helperQuickLinks = new HelperQuickLinks();
	  		helperQuickLinks.create(menuIcon,shoppingButton,cartButton,cartButtonNotification,ActivityStep11PaymentOptionsGateway.this,sharedPreferences);
	  		new ApplyViewParamsTask().execute();

			//DISPLAY OUTLET LOGO
	        File file = new File(extStorageDirectory+"/NunuaRaha/", SELECTED_BRAND_LOGO);
	        BitmapFactory.Options options = new BitmapFactory.Options();
	        options.inPreferredConfig = Bitmap.Config.ARGB_8888;
	        Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath(), options);
	        shopLogoview.setImageBitmap(bitmap);
  			
  		}else{
  			Intent intent = new Intent(ActivityStep11PaymentOptionsGateway.this, ActivityMyAccountLogin.class);
  			intent.putExtra("from" , "ActivityStep09ListDeliveryOptions");
    	    startActivity(intent);
  		}
	}
	
	private void initViews() {
		extStorageDirectory = Environment.getExternalStorageState().toString();
  	    extStorageDirectory = Environment.getExternalStorageDirectory().toString();
  	    
  	    layout_progressbar = (LinearLayout) findViewById(R.id.progressbar_view);
	    headersection = (RelativeLayout) findViewById(R.id.header);
	    sharedPreferences = getSharedPreferences(MY_SESSION,Context.MODE_PRIVATE);
	    editor = sharedPreferences.edit();
	    SELECTED_OUTLET_ID = sharedPreferences.getString("selectedOutletId", null);
	    SELECTED_OUTLET_TITLE = sharedPreferences.getString("selectedOutlet", null);
	    SELECTED_BRAND_ID = sharedPreferences.getString("selectedBrandId", null);
		SELECTED_BRAND_TITLE = sharedPreferences.getString("selectedBrand", null);
		SELECTED_BRAND_LOGO = sharedPreferences.getString("selectedBrandLogo", null);
		SELECTED_BRANCH_ID = sharedPreferences.getString("selectedBranchId", null);
		SELECTED_BRANCH_TITLE = sharedPreferences.getString("selectedBranch", null);
		USER_PHONE_NUMBER = sharedPreferences.getString("userPhoneNumber", null);
		EkMukta_Light = Typeface.createFromAsset(getAssets(),"fonts/ek_mukta/EkMukta-Light.ttf");
		app_name = (TextView) findViewById(R.id.app_name);
		menuIcon  = (Button) findViewById(R.id.menu_icon);
		headerText = (TextView) findViewById(R.id.headerText);
		shoppingButton = (Button) findViewById(R.id.shoppingButton);
		cartButton = (Button) findViewById(R.id.cartButton);
		cartButtonNotification = (TextView) findViewById(R.id.cartButtonNotification);
		shopLogoview = (ImageView) findViewById(R.id.shopLogo);

		creditCardNumber1 = (TextView) findViewById(R.id.creditCardNumber);
		creditCardExpiry1 = (TextView) findViewById(R.id.creditCardExpiry);
		creditCardCVV1 = (TextView) findViewById(R.id.creditCardCVV);
		cardHolderName1 = (TextView) findViewById(R.id.cardHolderName);
		cardHolderID1 = (TextView) findViewById(R.id.cardHolderID);
		processPayment1 = (Button) findViewById(R.id.processPayment);
		mpesaPayment1 = (Button) findViewById(R.id.mpesa);
		airtelPayment1 = (Button) findViewById(R.id.airtelmoney);
		
		mobilepaymentNumber1 = (EditText) findViewById(R.id.mobilepaymentNumber);
		MobiprocessPayment1 = (Button) findViewById(R.id.MobiprocessPayment);
		
		mobilempaymentNumber1 = (EditText) findViewById(R.id.mobilempaymentNumber);
		MobimprocessPayment1 = (Button) findViewById(R.id.MobimprocessPayment);
		


		if(sharedPreferences.contains("paymentMode")){
			String paymentMode = sharedPreferences.getString("paymentMode", null);
			if(paymentMode.equals("CreditCard")){
				
				creditCardNumber1.setVisibility(View.VISIBLE);
				creditCardExpiry1.setVisibility(View.VISIBLE);
				creditCardCVV1.setVisibility(View.VISIBLE);
				cardHolderName1.setVisibility(View.VISIBLE);
				cardHolderID1.setVisibility(View.VISIBLE);
				processPayment1.setVisibility(View.VISIBLE);
				
				
			}
			
			if(paymentMode.equals("MobileMoney")){
				mpesaPayment1.setVisibility(View.VISIBLE);
				airtelPayment1.setVisibility(View.VISIBLE);
               		
			}				
		}		

	}
		
	
	
	@Override
	public void onBackPressed() {
		finish();
		overridePendingTransition(R.anim.slide_page_in,R.anim.slide_page_out);//SlideIn animation
	}
	
	@Override
	public void finish() {
	    super.finish();
		overridePendingTransition(R.anim.slide_page_in,R.anim.slide_page_out);//SlideIn animation
	}
	
	@Override
	public void onResume() {
		super.onResume();  // Always call the superclass method first
		overridePendingTransition(R.anim.slide_page_in,R.anim.slide_page_out);//SlideIn animation
		
	}
	
	private class ApplyViewParamsTask extends AsyncTask<String, Void, String> {
		
		@Override
	    protected void onPreExecute() {
			layout_progressbar.setVisibility(View.VISIBLE);
	        super.onPreExecute();
	    }
		
		protected String doInBackground(String...params) {
			// TODO Auto-generated method stub
			return "Done";
		}
		
	    protected void onPostExecute(String params) {
			layout_progressbar.setVisibility(View.GONE);
			
		 mpesaPayment1.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
            		mobilempaymentNumber1.setVisibility(View.VISIBLE);
            		MobimprocessPayment1.setVisibility(View.VISIBLE);
            		mobilepaymentNumber1.setVisibility(View.GONE);
            		MobiprocessPayment1.setVisibility(View.GONE);
            		
                }
			});
		    
		 MobimprocessPayment1.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
            	 
            	 DefaultHttpClient httpclient = new DefaultHttpClient();
                 HttpPost httppost = new HttpPost("https://secure.3gdirectpay.com/API/v5/");  
                 String transactionToken = sharedPreferences.getString("transactionToken", null);
                 String companyToken = sharedPreferences.getString("companyToken", null);
                 
                 String mobilempaymentNumber2 = mobilempaymentNumber1.getText().toString();
                 
                 String chargeMpesaCardToken ="<API3G>"+
                		 	"<CompanyToken>"+companyToken+"</CompanyToken>"+
				            "<Request>ChargeTokenMobile</Request>"+
				            "<TransactionToken>"+transactionToken+"</TransactionToken>"+
				            "<PhoneNumber>"+mobilempaymentNumber2+"</PhoneNumber>"+
				            "<PaymentName>MPESA</PaymentName>"+
				            "</API3G>";
         
             
     
     try {
         StringEntity se = new StringEntity(chargeMpesaCardToken, HTTP.UTF_8);
         se.setContentType("text/xml");
         httppost.setEntity(se);

         HttpResponse httpresponse = httpclient.execute(httppost);
         HttpEntity resEntity = httpresponse.getEntity();
         String xmlStringResults = EntityUtils.toString(resEntity);   

        // Log.i("Token XML"," --> "+xmlStringResults);
         
         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
         DocumentBuilder db;
			try {
				db = factory.newDocumentBuilder();
				InputSource inStream = new InputSource();
             inStream.setCharacterStream(new StringReader(xmlStringResults));
             org.w3c.dom.Document doc;
				try {
					doc = db.parse(inStream);
					doc.getDocumentElement().normalize();
					
					NodeList nListResult = doc.getElementsByTagName("Result");
					for (int i = 0; i < nListResult.getLength(); i++) {
						Node nNode = nListResult.item(i);
						String nodeName = nNode.getNodeName();
						String nodeText = nListResult.item(i).getTextContent();
				 
						//System.out.println("\nCurrent Element :" + nodeName);
						//System.out.println("\nCurrent Element Value:" + nodeText);
						
						
							
				 
					}
					
					NodeList nListResultExplanation = doc.getElementsByTagName("ResultExplanation");
					for (int i = 0; i < nListResultExplanation.getLength(); i++) {
						Node nNode = nListResultExplanation.item(i);
						String nodeName = nNode.getNodeName();
						String nodeText = nListResultExplanation.item(i).getTextContent();
						//System.out.println("\nCurrent Element :" + nodeName);
						//System.out.println("\nResultExplanation:" + nodeText);
				 
					}
					
					NodeList nListResultInstructions = doc.getElementsByTagName("instructions");
					for (int i = 0; i < nListResultInstructions.getLength(); i++) {
						Node nNode = nListResultInstructions.item(i);
						String nodeName = nNode.getNodeName();
						String nodeTextinstruction = nListResultInstructions.item(i).getTextContent();
						//System.out.println("\nCurrent Element :" + nodeName);
						//System.out.println("\nInstructions:" + nodeTextinstruction);
						
						
						mobilempaymentNumber1.setVisibility(View.GONE);
	            		MobimprocessPayment1.setVisibility(View.GONE);
	            		mobilepaymentNumber1.setVisibility(View.GONE);
	            		MobiprocessPayment1.setVisibility(View.GONE);
	            		mpesaPayment1.setVisibility(View.GONE);
	            	   airtelPayment1.setVisibility(View.GONE);
						
						
						TextView mobilechargetoken1 = (TextView)findViewById(R.id.mobilechargetoken);
						mobilechargetoken1.setVisibility(View.VISIBLE);

					    Bundle extras = getIntent().getExtras();
					    
					    // Get endResult
					    mobilechargetoken1.setText(nodeTextinstruction);
				 
					}
					
				} catch (SAXException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}  

			} catch (ParserConfigurationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
         
         
         
     } catch (ClientProtocolException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
     } catch (IOException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
     }
 	
 }
                 
             
			});
			
			airtelPayment1.setOnClickListener(new View.OnClickListener() {
		          
				public void onClick(View v) {
            		mobilempaymentNumber1.setVisibility(View.GONE);
            		MobimprocessPayment1.setVisibility(View.GONE);
            		mobilepaymentNumber1.setVisibility(View.VISIBLE);
            		MobiprocessPayment1.setVisibility(View.VISIBLE);
	               }
	           
		        });	
			
			
			 MobiprocessPayment1.setOnClickListener(new View.OnClickListener() {
				 public void onClick(View v) {
	            	 
	            	 DefaultHttpClient httpclient = new DefaultHttpClient();
	                 HttpPost httppost = new HttpPost("https://secure.3gdirectpay.com/API/v5/");  
	                 String transactionToken = sharedPreferences.getString("transactionToken", null);
	                 String companyToken = sharedPreferences.getString("companyToken", null);
	                 
	                 String mobilepaymentNumber2 = mobilepaymentNumber1.getText().toString();
	                 
	                 String chargeAirtelCardToken ="<API3G>"+
	                		 	"<CompanyToken>"+companyToken+"</CompanyToken>"+
					            "<Request>ChargeTokenMobile</Request>"+
					            "<TransactionToken>"+transactionToken+"</TransactionToken>"+
					            "<PhoneNumber>"+mobilepaymentNumber2+"</PhoneNumber>"+
					            "<PaymentName>airtel</PaymentName>"+
					            "</API3G>";
	         
	             
	     
	     try {
	         StringEntity se = new StringEntity(chargeAirtelCardToken, HTTP.UTF_8);
	         se.setContentType("text/xml");
	         httppost.setEntity(se);

	         HttpResponse httpresponse = httpclient.execute(httppost);
	         HttpEntity resEntity = httpresponse.getEntity();
	         String xmlStringResults = EntityUtils.toString(resEntity);   

	        // Log.i("Token XML"," --> "+xmlStringResults);
	         
	         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	         DocumentBuilder db;
				try {
					db = factory.newDocumentBuilder();
					InputSource inStream = new InputSource();
	             inStream.setCharacterStream(new StringReader(xmlStringResults));
	             org.w3c.dom.Document doc;
					try {
						doc = db.parse(inStream);
						doc.getDocumentElement().normalize();
						
						NodeList nListResult = doc.getElementsByTagName("Result");
						for (int i = 0; i < nListResult.getLength(); i++) {
							Node nNode = nListResult.item(i);
							String nodeName = nNode.getNodeName();
							String nodeText = nListResult.item(i).getTextContent();
					 
							//System.out.println("\nCurrent Element :" + nodeName);
							//System.out.println("\nCurrent Element Value:" + nodeText);
							
							
								
					 
						}
						
						NodeList nListResultExplanation = doc.getElementsByTagName("ResultExplanation");
						for (int i = 0; i < nListResultExplanation.getLength(); i++) {
							Node nNode = nListResultExplanation.item(i);
							String nodeName = nNode.getNodeName();
							String nodeText = nListResultExplanation.item(i).getTextContent();
							//System.out.println("\nCurrent Element :" + nodeName);
							//System.out.println("\nResultExplanation:" + nodeText);
					 
						}
						
						NodeList nListResultInstructions = doc.getElementsByTagName("instructions");
						for (int i = 0; i < nListResultInstructions.getLength(); i++) {
							Node nNode = nListResultInstructions.item(i);
							String nodeName = nNode.getNodeName();
							String nodeTextinstruction = nListResultInstructions.item(i).getTextContent();
							//System.out.println("\nCurrent Element :" + nodeName);
							//System.out.println("\nInstructions:" + nodeTextinstruction);
							
							
							mobilempaymentNumber1.setVisibility(View.GONE);
		            		MobimprocessPayment1.setVisibility(View.GONE);
		            		mobilepaymentNumber1.setVisibility(View.GONE);
		            		MobiprocessPayment1.setVisibility(View.GONE);
		            		mpesaPayment1.setVisibility(View.GONE);
		            	   airtelPayment1.setVisibility(View.GONE);
							
							
							TextView mobilechargetoken1 = (TextView)findViewById(R.id.mobilechargetoken);
							mobilechargetoken1.setVisibility(View.VISIBLE);

							    Bundle extras = getIntent().getExtras();
							    // Get endResult
							    mobilechargetoken1.setText(nodeTextinstruction);
					 
						}
						
					} catch (SAXException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}  

				} catch (ParserConfigurationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	         
	         
	         
	     } catch (ClientProtocolException e) {
	         // TODO Auto-generated catch block
	         e.printStackTrace();
	     } catch (IOException e) {
	         // TODO Auto-generated catch block
	         e.printStackTrace();
	     }
	 	
	 }
	                 
	             
				});
			 
			
			
			processPayment1.setOnClickListener(new View.OnClickListener() {
                public void onClick(View v) {
                	
                	//Create credit card Payment Token
                	
                	
                	DefaultHttpClient httpclient = new DefaultHttpClient();
                    HttpPost httppost = new HttpPost("https://secure.3gdirectpay.com/API/v5/");  

            		String transactionToken = sharedPreferences.getString("transactionToken", null);
            		String companyToken = sharedPreferences.getString("companyToken", null);
            		String creditCardNumber2 = creditCardNumber1.getText().toString();
    				String creditCardExpiry2 = creditCardExpiry1.getText().toString(); 
    				String creditCardCVV2 = creditCardCVV1.getText().toString(); 
    				String cardHolderName2 = cardHolderName1.getText().toString(); 
    				String cardHolderID2 = cardHolderID1.getText().toString(); 
            		
                    //Log.i("Date"," --> "+strDate);
                    
                    //XML example to send via Web Service.
                    String createCardToken ="<API3G>"+
                    					"<CompanyToken>"+companyToken+"</CompanyToken>"+
    						            "<Request>chargeTokenCreditCard</Request>"+
    						            "<TransactionToken>"+transactionToken+"</TransactionToken>"+
    						            "<CreditCardNumber>"+creditCardNumber2+"</CreditCardNumber>"+
    						            "<CreditCardExpiry>"+creditCardExpiry2+"</CreditCardExpiry>"+
    						            "<CreditCardCVV>"+creditCardCVV2+"</CreditCardCVV>"+
    						            "<CardHolderName>"+cardHolderName2+"</CardHolderName>"+
    						            "<CardHolderID>"+cardHolderID2+"</CardHolderID>"+
    						            "<customerCountry>KE</customerCountry>"+
    						            "</API3G>";
                        
                    try {
                        StringEntity se = new StringEntity(createCardToken, HTTP.UTF_8);
                        se.setContentType("text/xml");
                        httppost.setEntity(se);

                        HttpResponse httpresponse = httpclient.execute(httppost);
                        HttpEntity resEntity = httpresponse.getEntity();
                        String xmlStringResults = EntityUtils.toString(resEntity);   

                        Log.i("credit card XML"," --> "+xmlStringResults);
                        
                        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                        DocumentBuilder db;
    					try {
    						db = factory.newDocumentBuilder();
    						InputSource inStream = new InputSource();
                            inStream.setCharacterStream(new StringReader(xmlStringResults));
                            org.w3c.dom.Document doc;
    						try {
    							doc = db.parse(inStream);
    							doc.getDocumentElement().normalize();
    							
    							NodeList nListResult = doc.getElementsByTagName("Result");
    							for (int i = 0; i < nListResult.getLength(); i++) {    								Node nNode = nListResult.item(i);
    								String nodeName = nNode.getNodeName();
    								String nodeText = nListResult.item(i).getTextContent();
    						 
    								System.out.println("\nCurrent Element :" + nodeName);
    								System.out.println("\nCurrent Element Value:" + nodeText);
    								
    								
    									if (nodeText.equals("000")) {
    							            	Intent intent = new Intent(ActivityStep11PaymentOptionsGateway.this, ActivityStep12ThankYou.class);
    								    	    startActivity(intent);
    							                
    							            
        								}else{
        									NodeList nListResultExplanation = doc.getElementsByTagName("ResultExplanation");
        	    							for (int j = 0; j < nListResultExplanation.getLength(); j++) {
        	    								Node nNode1 = nListResultExplanation.item(j);
        	    								String nodeName1 = nNode1.getNodeName();
        	    								String nodeText1 = nListResultExplanation.item(j).getTextContent();
        	    								
        									System.out.println("\nCurrent Element Value:" + nodeText);
    										Log.i("finalcountyr"," --> Me");
    										
    										
    										TextView datachargetoken1 = (TextView)findViewById(R.id.datachargetoken);
    										datachargetoken1.setVisibility(View.VISIBLE);

    										    Bundle extras = getIntent().getExtras();
    										

    										         // Get endResult
    										    	datachargetoken1.setText(nodeText1);
    										         
    										

        								}
    						 
    							}
    							
    							
    						 
    							}
    							
    						} catch (SAXException e) {
    							// TODO Auto-generated catch block
    							e.printStackTrace();
    						}  

    					} catch (ParserConfigurationException e) {
    						// TODO Auto-generated catch block
    						e.printStackTrace();
    					}
                        
                        
                        
                    } catch (ClientProtocolException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                	
                }
			});

			
			
           }
	  		

	    }
	    
	 }

	

